@typeparam TItem

<ul class="@(isRoot ? "tree": "")">
    @foreach (var item in Items)
    {
        <li>
            <div class="d-flex align-items-center mb-2 tree-container" style="padding-left:@(Level*20)px">

                @if (HasChildren(item))
                {

                    @if (Root.IsExpanded(item))
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" @onclick="@(() => Root.ToogleExpanded(item))" class="icon me-2 cursor-pointer" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="#607D8B" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                            <circle cx="12" cy="12" r="9" />
                            <line x1="9" y1="12" x2="15" y2="12" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" @onclick="@(() => Root.ToogleExpanded(item))" class="icon me-2 cursor-pointer" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="#607D8B" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                            <circle cx="12" cy="12" r="9" />
                            <line x1="9" y1="12" x2="15" y2="12" />
                            <line x1="12" y1="9" x2="12" y2="15" />
                        </svg>
                    }
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon me-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="1.5" stroke="#607D8B" fill="none" stroke-linecap="round" stroke-linejoin="round">

                    </svg>
                }

                <div @onclick="@(() => Root.ToogleSelected(item))" class="cursor-pointer @(Root.IsSelected(item) ? "tree-node-selected": "")">
                    @Template(item)
                </div>
            </div>


            @if (HasChildren(item) && Root.IsExpanded(item))
            {
                <TabBlazor.Components.TreeViews.TreeViewNodes Items="ChildSelector(item)"
                                                              Template="Template"
                                                              ChildSelector="ChildSelector"
                                                              Level="@(Level+1)" />
            }
        </li>

    }
</ul>

